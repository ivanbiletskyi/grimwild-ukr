import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { searchDocumentation, type SearchResult } from '../utils/searchUtils';
import './Search.css';

const Search: React.FC = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  // Debounced search
  const performSearch = useCallback(async (searchQuery: string) => {
    if (searchQuery.trim().length < 2) {
      setResults([]);
      setHasSearched(false);
      return;
    }

    setLoading(true);
    setHasSearched(true);

    try {
      const searchResults = await searchDocumentation(searchQuery);
      setResults(searchResults);
    } catch (error) {
      console.error('Search error:', error);
      setResults([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // Debounce search input
  useEffect(() => {
    const timer = setTimeout(() => {
      performSearch(query);
    }, 300);

    return () => clearTimeout(timer);
  }, [query, performSearch]);

  const highlightText = (text: string, highlight: string) => {
    if (!highlight.trim()) {
      return text;
    }

    const parts = text.split(new RegExp(`(${highlight})`, 'gi'));
    return (
      <>
        {parts.map((part, index) =>
          part.toLowerCase() === highlight.toLowerCase() ? (
            <mark key={index} className="search-highlight">
              {part}
            </mark>
          ) : (
            <span key={index}>{part}</span>
          )
        )}
      </>
    );
  };

  // Safe encode URI component
  const safeEncodeURIComponent = (str: string): string => {
    try {
      // Clean the string first - remove any null bytes or other problematic characters
      // eslint-disable-next-line no-control-regex
      const cleaned = str.replace(/[\x00-\x1F\x7F-\x9F]/g, '');
      return encodeURIComponent(cleaned);
    } catch (error) {
      console.error('Error encoding URI component:', error);
      // Return empty string if encoding fails
      return '';
    }
  };

  return (
    <div className="search-page">
      <div className="search-header">
        <h1>üîç –ü–æ—à—É–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó</h1>
        <p className="search-description">
          –ó–Ω–∞–π–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –∫–ª–∞—Å–∏, –º–µ—Ö–∞–Ω—ñ–∫–∏ —Ç–∞ —ñ–Ω—à–µ
        </p>
      </div>

      <div className="search-input-container">
        <input
          type="text"
          className="search-input"
          placeholder="–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          autoFocus
        />
        {query && (
          <button
            className="search-clear"
            onClick={() => {
              setQuery('');
              setResults([]);
              setHasSearched(false);
            }}
            aria-label="Clear search"
          >
            ‚úï
          </button>
        )}
      </div>

      {loading && (
        <div className="search-loading">
          <div className="search-spinner"></div>
          <p>–ü–æ—à—É–∫...</p>
        </div>
      )}

      {!loading && hasSearched && results.length === 0 && (
        <div className="search-no-results">
          <p>üòî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "{query}"</p>
          <p className="search-tip">–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å</p>
        </div>
      )}

      {!loading && results.length > 0 && (
        <div className="search-results">
          <p className="search-results-count">
            –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: <strong>{results.length}</strong>
          </p>
          <div className="search-results-list">
            {results.map((result, index) => {
              const searchParam = safeEncodeURIComponent(query);
              const contextParam = safeEncodeURIComponent(result.context || '');
              return (
                <Link
                  key={`${result.path}-${index}`}
                  to={`${result.path}?search=${searchParam}&context=${contextParam}`}
                  className="search-result-card"
                >
                  <h3 className="search-result-title">
                    {highlightText(result.title, query)}
                  </h3>
                  <p className="search-result-excerpt">
                    {highlightText(result.excerpt, query)}
                  </p>
                  <div className="search-result-meta">
                    <span className="search-result-matches">
                      {result.matches} –∑–±—ñ–≥—ñ–≤
                    </span>
                    <span className="search-result-path">{result.path}</span>
                  </div>
                </Link>
              );
            })}
          </div>
        </div>
      )}

      {!loading && !hasSearched && (
        <div className="search-tips">
          <h3>üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ—à—É–∫—É</h3>
          <ul>
            <li>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, —è–∫ "–∫–ª–∞—Å", "–±—ñ–π", "–∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è"</li>
            <li>–®—É–∫–∞–π—Ç–µ –Ω–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤: "–ë–∞—Ä–¥", "–ü–∞–ª–∞–¥–∏–Ω", "–ß–∞—Ä–æ–¥—ñ–π"</li>
            <li>–í–≤–æ–¥—å—Ç–µ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É</li>
            <li>–ü–æ—à—É–∫ –Ω–µ —á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É</li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default Search;

